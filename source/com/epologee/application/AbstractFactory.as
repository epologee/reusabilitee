package com.epologee.application {	import com.epologee.development.logging.logger;	import com.epologee.util.stage.IInitializable;	import com.epologee.util.stage.StageDetector;	import com.epologee.util.stage.StageSettings;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.IEventDispatcher;	import flash.utils.getDefinitionByName;	/**	 * @author Eric-Paul Lecluse | epocom (c) 2009	 */		public class AbstractFactory extends MovieClip implements IInitializable {		//		private var _preloader : AbstractPreloader;		private var _applicationClass : String;
		/**		 * Extend the BasePreloaderFactory and call super constructor with the appropriate parameters.		 * @param inPreloader your custom preloader class that will create the list of preloader elements		 * @param inApplicationClass the string value of the path to your application class (controller).		 */		public function AbstractFactory(inPreloader : AbstractPreloader, inApplicationClass : String, inAlignMode : String = "no scale, top left alignment") {			StageSettings.apply(this, inAlignMode);						_preloader = inPreloader;			_applicationClass = inApplicationClass;						if (!_preloader || !_applicationClass) throw new Error("Extend the BasePreloaderFactory and call super constructor with the appropriate parameters.");			_preloader.addEventListener(Event.COMPLETE, handlePreloadComplete);						StageDetector.initializeOnce(this);		}		public function initialize() : void {			_preloader.timeline = this;			_preloader.start();		}		private function constructAndStartApplication() : void {			try {				var ApplicationClass : Class = Class(getDefinitionByName(_applicationClass));				var app : IApplication = new ApplicationClass();				addChild(app as DisplayObject);								try {					app.startApplication(_preloader.elementList);				} catch (ei : Error) {					if (loaderInfo.hasOwnProperty("uncaughtErrorEvents") && IEventDispatcher(loaderInfo["uncaughtErrorEvents"]).hasEventListener("uncaughtError")) {						throw ei;					} else {						logger.error("startApplication() failed - " + ei.message);						logger.error("stack: " + ei.getStackTrace());					}				}			} catch (e : Error) {				if (loaderInfo.hasOwnProperty("uncaughtErrorEvents") && IEventDispatcher(loaderInfo["uncaughtErrorEvents"]).hasEventListener("uncaughtError")) {					throw e;				} else {					logger.error("startApplication: Error [" + e.errorID + "] constructing " + ApplicationClass);				}			}		}		private function handlePreloadComplete(event : Event) : void {			_preloader.removeEventListener(Event.COMPLETE, handlePreloadComplete);			nextFrame();						constructAndStartApplication();		}
	}}