package com.epologee.ui.combobox {	import com.epologee.development.logging.logger;	import com.epologee.ui.buttons.MultiStateBehavior;	import com.epologee.ui.buttons.MultiStateEvent;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.utils.getQualifiedClassName;	/**	 * @author Eric-Paul Lecluse | epologee.com (c) 2009	 */	public class EasyCombo extends EventDispatcher {		public static const EMPTY_DATA : String = "";		private var _rowAsset : Class;		private var _rowMiddleAsset : Class;		private var _button : MultiStateBehavior;		private var _delayTimer : Timer;		private var _name : String;		private var _selected : IComboAssetRow;		private var _timeline : IComboAssetMain;		private var _timelineAsSprite : Sprite;		private var _visible : Boolean;		public function get hasNameLabel() : Boolean {			return _name != null && _name.length > 0;		}		public function EasyCombo(inName : String, inTimeline : IComboAssetMain, inRowAsset : Class, inRowMiddleAsset : Class = null) {			super();						// first let's store the parameters			_name = inName;			_timeline = inTimeline;			_timelineAsSprite = Sprite(inTimeline);			_rowAsset = inRowAsset;			_rowMiddleAsset = inRowMiddleAsset ? inRowMiddleAsset : _rowAsset;									// add listeners for the timeout			_timeline.addEventListener(MouseEvent.ROLL_OUT, startTimeout);			_timeline.addEventListener(MouseEvent.ROLL_OVER, cancelTimeout);						// create a MSB of the "arrow" design. 			_button = new MultiStateBehavior(_timeline.button);			_button.addEventListener(MultiStateEvent.CLICK, pulldown);						_timeline.label = hasNameLabel ? _name : "";			_delayTimer = new Timer(1000, 1);			_delayTimer.addEventListener(TimerEvent.TIMER, hide);						reset();		}		public function selectByData(inData : String) : void {			logger.debug("selectByData: " + inData);			var leni : int = _timelineAsSprite.numChildren;			for (var i  : int = 0; i  < leni ; i ++) {				var row : IComboAssetRow = _timelineAsSprite.getChildAt(i) as IComboAssetRow;				if (row) {					logger.debug("--: "+row);					if (row.data == inData) {						logger.info("--: found "+row);						select(row);						return;					}				} else {					logger.warn("--: not an icomborowasset "+_timelineAsSprite.getChildAt(i));				}			}		}		/**		 * Clears the data and puts a first element in the combobox containing the name.		 */		public function reset(inListRemainsEmpty : Boolean = true) : void {			clearData();						if (hasNameLabel) {				_selected = createRow(_name, EMPTY_DATA, inListRemainsEmpty);				_timeline.addRow(_selected);			}				}		public function getSelectedData() : String {			return _selected.data;		}		public function getSelectedLabel() : String {			return _selected.label;		}		/**		 * @param inComboBoxItems a vector of objects implementing #IComboBoxItem		 */		public function setData(inComboBoxItems : Array) : void {			reset(false);						var i : uint;			var leni : uint = inComboBoxItems.length;			for (i = 0;i < leni;i++) {				var o : IComboData = inComboBoxItems[i];								var row : IComboAssetRow = createRow(o.getLabel(), o.getData(), (i + 1 == leni));								_timeline.addRow(row);			}		}		private function createRow(inLabel : String, inData : String, inEnd : Boolean = false) : IComboAssetRow {			var row : IComboAssetRow = inEnd ? new _rowAsset() : new _rowMiddleAsset();			row.label = inLabel;			row.data = inData;			var msb : MultiStateBehavior = new MultiStateBehavior(MovieClip(row));			msb.addEventListener(MultiStateEvent.CLICK, handleRowClick);			return row;		}		private function clearData() : void {			_timeline.clearRows();		}		private function handleRowClick(event : MultiStateEvent) : void {			var msb : MultiStateBehavior = MultiStateBehavior(event.target);			select(msb.timeline as IComboAssetRow);		}				private function select(inAsset:IComboAssetRow) : void {			if (!inAsset) return;						_selected = inAsset;						var ece : EasyComboEvent = new EasyComboEvent(EasyComboEvent.CHANGED);			ece.data = _selected.data;			ece.label = _selected.label;						_timeline.label = _selected.label;						show(false);						dispatchEvent(ece);		}		private function startTimeout(event : MouseEvent) : void {			_delayTimer.reset();			_delayTimer.start();		}		private function cancelTimeout(event : MouseEvent) : void {			_delayTimer.stop();		}		private function pulldown(event : MultiStateEvent) : void {			show(!_visible);		}		private function show(inVisible : Boolean) : void {			_visible = inVisible;			if (_visible) {				_timeline.show();			} else {				_timeline.hide()			}		}		private function hide(event : TimerEvent) : void {			show(false);		}		override public function toString() : String {			// com.epologee.ui.combobox.EasyCombo			return getQualifiedClassName(this);		}	}}