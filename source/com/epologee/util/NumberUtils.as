package com.epologee.util {	/**	 * With a little help from Keith Peters	 * http://www.bit-101.com/blog/?p=1242	 */	public class NumberUtils {		public static function normalize(value : Number, minimum : Number, maximum : Number) : Number {			return (value - minimum) / (maximum - minimum);		}		/**		 * Works for negative numbers.		 * @param maximum > @param minimum		 */		public static function interpolate(normValue : Number, minimum : Number, maximum : Number) : Number {			return minimum + (maximum - minimum) * normValue;		}				        public static function getNumberAsHexString(number:uint, minimumLength:uint = 1, showHTMLNotation:Boolean = true):String {                // The string that will be output at the end of the function.                var string:String = number.toString(16).toUpperCase();                                // While the minimumLength argument is higher than the length of the string, add a leading zero.                while (minimumLength > string.length) {                        string = "0" + string;                }                                // Return the result with a "0x" in front of the result.                if (showHTMLNotation) { string = "#" + string; }                                return string;        }				public static function map(value : Number, min1 : Number, max1 : Number, min2 : Number, max2 : Number) : Number {			return interpolate(normalize(value, min1, max1), min2, max2);		}		public static function limit(value : Number, min : Number, max : Number) : Number {			return Math.min(Math.max(min, value), max);		}		public static function limitAngle(value : Number, center : Number, maxDecrease : Number, maxIncrease : Number) : Number {			var padding : Number = Math.abs(maxDecrease) + Math.abs(value) + Math.abs(center);						value = limit(value + padding, center - maxDecrease + padding, center + maxIncrease + padding);			value -= padding;						return value;		}		public static function formatTimeDisplay(inSeconds : Number) : String {			var m : uint = inSeconds / 60;			var s : uint = inSeconds % 60;			return m + ":" + (s < 10 ? "0" : "") + s;		}		public static function random(inMinimum : Number, inMaximum : Number) : Number {
			return map(Math.random(), 0, 1, inMinimum, inMaximum);
		}
		public static function round(inValue : Number, inDecimals : int) : Number {			var m : Number = Math.pow(10, inDecimals);			return Math.round(inValue * m) / m;
		}
	}}	